// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum BillType {
  REGULAR // Обычный
  SAVINGS // Накопительный
  DEBT_OWE // Долговой; я должен
  DEBT_LEND // Долговой; мне должны
}

enum OperationType {
  WITHDRAWAL // Вывод
  DEPOSIT // Пополнение
}

model Bill {
  id              Int         @id @default(autoincrement())
  name            String
  type            BillType
  backgroundColor String
  emoji           String
  description     String?
  balance         Decimal     @default(0.00)
  includeInTotal  Boolean     @default(true)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  operations      Operation[]
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String?
  password   String
  role       Role        @default(USER)
  sessions   Session[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Bill       Bill[]
  operations Operation[]
  Category   Category[]
}

model Session {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  accessToken  String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  operations  Operation[]
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([name, userId])
}

model Operation {
  id         Int           @id @default(autoincrement())
  amount     Decimal
  type       OperationType
  category   Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId Int?
  date       DateTime      @default(now())
  note       String?
  bill       Bill          @relation(fields: [billId], references: [id], onDelete: Cascade)
  billId     Int
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}
