import type { OperationType } from "@prisma/client";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";
import { faker } from "@faker-js/faker";

const prisma = new PrismaClient();

async function main() {
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const passwordHash = await bcrypt.hash("adminadmin", 10);
  const user = await prisma.user.upsert({
    where: { email: "admin@yandex.ru" },
    update: {},
    create: {
      email: "admin@yandex.ru",
      name: "admin",
      password: passwordHash,
      role: "ADMIN",
    },
  });

  // –°—á–µ—Ç–∞
  await prisma.bill.createMany({
    data: [
      {
        name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç",
        type: "REGULAR",
        backgroundColor: "#FF5733",
        emoji: "üí∞",
        balance: 10000,
        includeInTotal: true,
        userId: user.id,
      },
      {
        name: "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è",
        type: "SAVINGS",
        backgroundColor: "#33FF57",
        emoji: "üè¶",
        balance: 50000,
        includeInTotal: true,
        userId: user.id,
      },
      {
        name: "–ö—Ä–µ–¥–∏—Ç",
        type: "DEBT_OWE",
        backgroundColor: "#5733FF",
        emoji: "üí≥",
        balance: -15000,
        includeInTotal: false,
        userId: user.id,
      },
      {
        name: "–î–æ–ª–∂–Ω–∏–∫",
        type: "DEBT_LEND",
        backgroundColor: "#FFC300",
        emoji: "ü§ù",
        balance: 7000,
        includeInTotal: true,
        userId: user.id,
      },
    ],
  });

  const createdBills = await prisma.bill.findMany({
    where: { userId: user.id },
  });

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoriesData = [
    { name: "–ü—Ä–æ–¥—É–∫—Ç—ã", description: "–ï–¥–∞ –∏ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã" },
    { name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", description: "–¢–∞–∫—Å–∏, –±–µ–Ω–∑–∏–Ω, –º–µ—Ç—Ä–æ" },
    { name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", description: "–ö–∏–Ω–æ, –±–∞—Ä—ã, –∏–≥—Ä—ã" },
    { name: "–î–æ—Ö–æ–¥", description: "–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ñ—Ä–∏–ª–∞–Ω—Å" },
    { name: "–ó–¥–æ—Ä–æ–≤—å–µ", description: "–ê–ø—Ç–µ–∫–∏, –≤—Ä–∞—á–∏" },
    { name: "–ü–æ–¥–∞—Ä–∫–∏", description: "–ü–æ–¥–∞—Ä–∫–∏ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏" },
  ];

  const categories = await Promise.all(
    categoriesData.map((cat) =>
      prisma.category.create({
        data: {
          ...cat,
          userId: user.id,
        },
      })
    )
  );

  // –û–ø–µ—Ä–∞—Ü–∏–∏
  const operations = [];

  for (let i = 0; i < 1000; i++) {
    const isIncome = Math.random() < 0.4;
    const amount = Number(
      faker.finance.amount({ min: 100, max: 3000, dec: 2 })
    );
    const bill = faker.helpers.arrayElement(createdBills);
    const category = faker.helpers.arrayElement(
      categories.filter((c) =>
        isIncome ? c.name === "–î–æ—Ö–æ–¥" : c.name !== "–î–æ—Ö–æ–¥"
      )
    );

    operations.push({
      amount,
      type: (isIncome ? "DEPOSIT" : "WITHDRAWAL") as OperationType,
      userId: user.id,
      billId: bill.id,
      categoryId: category.id,
      note: faker.lorem.words(3),
      date: faker.date.recent({ days: 90 }), // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
    });
  }

  await prisma.operation.createMany({
    data: operations,
  });

  console.log(
    "‚úÖ Seed –∑–∞–≤–µ—Ä—à—ë–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 4 —Å—á—ë—Ç–∞, 6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π, 1000 –æ–ø–µ—Ä–∞—Ü–∏–π."
  );
}

main()
  .catch((e) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
